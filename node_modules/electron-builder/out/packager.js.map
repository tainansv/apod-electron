{"version":3,"file":"packager.js","sourceRoot":"","sources":["../src/packager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AA4WA,AAEG,AACH,AAAM;;;;qEAAC,AAAK,WAA2B,AAA6B;AAClE,2BAAmB,AAAc;AAC/B,AAAM,AAAC,sBAAG,AAAM,MAAgG,gGAAC,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAO,UAAG,AAAO,AAAC,OAAE,AACtK;AAAC;AAED,YAAI,AAAmB;AACvB,YAAI,AAAC;AACH,AAAW,0BAAG,CAAC,MAAM,AAAY,AAAC,cAAC,AAAI,AAAE,AAC3C;AAAC,UACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,IAAI,AAAK,MAAC,AAAS,UAAC,AAAkB,AAAC,AAAC,AAChD;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,IAAI,AAAK,AAAC,oCAA8B,AAAC,CAAE,AAAC,AACpD;AAAC,AACH;AAAC;AAED,AAAE,AAAC,YAAC,AAAW,YAAC,AAAU,WAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AACpC,AAAW,0BAAG,AAAW,YAAC,AAAS,UAAC,AAAO,QAAC,AAAM,AAAC,AACrD;AAAC;AAED,cAAM,AAAU,aAAG,AAAW,YAAC,AAAO,QAAC,AAAG,AAAC;AAC3C,AAAE,AAAC,YAAC,AAAU,aAAG,AAAC,AAAC,GAAC,AAAC;AACnB,AAAW,0BAAG,AAAW,YAAC,AAAS,UAAC,AAAC,GAAE,AAAU,AAAC,AACpD;AAAC;AAED,cAAM,AAAW,cAAG,AAAW,YAAC,AAAO,QAAC,AAAG,AAAC;AAC5C,AAAE,AAAC,YAAC,AAAW,cAAG,AAAC,AAAC,GAAC,AAAC;AACpB,AAAW,0BAAG,AAAW,YAAC,AAAS,UAAC,AAAC,GAAE,AAAW,AAAC,AACrD;AAAC;AAED,AAAE,AAAC,YAAC,AAAW,YAAC,AAAK,MAAC,AAAG,AAAC,KAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AACxC,AAAW,2BAAI,AAAI,AACrB;AAAC;AAED,AAAE,AAAC,YAAC,AAAiB,oCAAC,AAAW,aAAE,AAAO,AAAC,AAAC,UAAC,AAAC;AAC5C,kBAAM,IAAI,AAAK,MAAC,AAAS,AAAC,wDAA8C,AAAW,WAAE,AAAC,AAAC,AACzF;AAAC,AACH;AAAC;;;;;;;;;;;;;AApZD,AAAO,AAAE,AAA0B,AAAE,AAAK,AAAE,AAAI,AAAE,AAAI,AAAE,AAAiB,AAAE,AAAM,AAAE,AAAG,AAAE,AAAM,AAAuB;;;;;;AACrH,AAAO,AAAE,AAAU,AAAE,AAAM,AAAsC;;;;;;AACjE,AAAO,AAAE,AAAG,AAAE,AAAM,AAA+B;;;;;;AACnD,AAAO,AAAE,AAAG,AAAE,AAAc,AAAE,AAAoB,AAAE,AAAM,AAAmC;;;;;;AAC7F,AAAO,AAAE,AAAY,AAAE,AAAM,AAAQ;;;;;;AACrC,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACtC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAE,AAAI,AAAiB,AAAE,AAAM,AAAQ;;;;;;AAChD,AAAO,AAAE,AAAO,AAAE,AAAM,AAAW;;;;;;AACnC,AAAO,AAAE,AAAY,AAAE,AAAM,AAAQ;;;;;;AACrC,AAAO,AAAE,AAAI,AAAE,AAAQ,AAAgC,AAAM,AAAQ;;;;;;AAKrE,AAAO,AAAE,AAA2B,AAAE,AAAa,AAAE,AAAU,AAAE,AAAM,AAAyB;;;;;;AAChG,AAAO,AAAE,AAAkB,AAAE,AAAkB,AAAE,AAAc,AAAE,AAAM,AAAe;;;;;;AACtF,AAAO,AAAE,AAAa,AAAE,AAAe,AAAE,AAAM,AAAwB;;;;;;AACvE,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAuB;;;;;;AACzD,AAAO,AAAE,AAAS,AAAE,AAAgB,AAAE,AAAM,AAAa;;;;;;;;AAGzD,oBAAoB,AAAqB,SAAE,AAAa,OAAE,AAAiB;AACzE,AAAO,YAAC,AAAE,GAAC,AAAK,OAAE,AAAO,AAAC,AAC5B;AAAC,AAID,AAAM;;AAyCJ,AAAoC;AACpC,gBAAqB,AAAwB,SAAW,AAAoC;AAAvE,aAAO,UAAP,AAAO,AAAiB;AAAW,aAAiB,oBAAjB,AAAiB,AAAmB;AAtB5F,aAAiC,oCAAG,AAAI;AAK/B,aAAY,eAAG,AAAI,AAAY,AAAE;AAIjC,aAAc,iBAAG,AAAI,AAAM,AAAE;AAE9B,aAAe,kBAAG,AAAI,AAAI,+DAA8B,MAAM,AAAiB,mEAAC,AAAI,KAAC,AAAU,YAAE,AAAI,KAAC,AAAQ,UAAE,AAAI,KAAC,AAAW,AAAC,AAAC;AAEzH,aAAiB,oBAA8D,AAAE;AAUhG,AAAE,AAAC,YAAC,AAAa,iBAAI,AAAO,AAAC,SAAC,AAAC;AAC7B,kBAAM,IAAI,AAAK,MAAC,AAAqE,AAAC,AACxF;AAAC;AACD,AAAE,AAAC,YAAC,AAAe,mBAAI,AAAO,AAAC,SAAC,AAAC;AAC/B,kBAAM,IAAI,AAAK,MAAC,AAAqF,AAAC,AACxG;AAAC;AAED,AAAI,aAAC,AAAU,aAAG,AAAO,QAAC,AAAU,cAAI,AAAI,OAAG,AAAO,QAAC,AAAG,AAAE,QAAG,AAAI,MAAC,AAAO,QAAC,AAAO,QAAC,AAAU,AAAC;AAE/F,AAAI,aAAC,AAAW,cAAG,AAAO,QAAC,AAAW,eAAI,AAAI,OAAG,AAAI,OAAG,AAAI,MAAC,AAAO,QAAC,AAAI,KAAC,AAAU,YAAE,AAAO,QAAC,AAAW,AAAC;AAE1G,YAAI,AAAC;AACH,AAAG,2CAAC,AAAmB,AAAG,AAAe,AAAC,AAC5C;AAAC,UACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAkC;AAClC,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAC,aAAY,AAAc,AAAC,AAAC,iBAAC,AAAC;AACnC,sBAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC;AAvDD,QAAI,AAAkB;AACpB,AAAM,eAAC,AAAI,KAAC,AAAmB,AACjC;AAAC;AAMD,QAAI,AAAM;AACR,AAAM,eAAC,AAAI,KAAC,AAAO,AACrB;AAAC;AAiBD,QAAI,AAAc;AAChB,AAAM,eAAC,AAAI,KAAC,AAAe,gBAAC,AAAK,AACnC;AAAC;AA4BD,AAAmB,wBAAC,AAA2D;AAC7E,AAAI,aAAC,AAAiB,kBAAC,AAAI,KAAC,AAAO,AAAC,AACtC;AAAC;AAED,AAAe,oBAAC,AAAyC;AACvD,AAAU,mBAAC,AAAI,KAAC,AAAY,cAAE,AAAiB,mBAAE,AAAO,AAAC;AACzD,AAAM,eAAC,AAAI,AACb;AAAC;AAED,AAAuB,4BAAC,AAAsB;AAC5C,AAAI,aAAC,AAAY,aAAC,AAAI,KAAC,AAAiB,mBAAE,AAAK,AAAC,AAClD;AAAC;AAEK,AAAK,SAAX,AAAK;;;;AACH,gBAAI,AAAU,aAAkB,AAAI;AACpC,gBAAI,AAAiB,oBAAG,AAAI,MAAC,AAAO,QAAC,AAAM;AAC3C,AAAE,AAAC,gBAAC,OAAO,AAAiB,sBAAK,AAAQ,AAAC,UAAC,AAAC;AAC1C,AAA8B;AAC9B,AAAU,6BAAG,AAAiB;AAC9B,AAAiB,oCAAG,AAAI,AAC1B;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAiB,qBAAI,AAAI,QAAI,AAAiB,kBAAC,AAAO,WAAI,AAAI,QAAI,AAAiB,kBAAC,AAAO,QAAC,AAAQ,QAAC,AAAG,AAAC,AAAC,aAAC,AAAC;AACnH,AAAU,6BAAG,AAAiB,kBAAC,AAAO,AACxC;AAAC;AAED,kBAAM,AAAU,aAAG,AAAI,MAAC,AAAU;AAElC,kBAAM,AAAc,iBAAG,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;AAC5D,AAAI,kBAAC,AAAW,cAAG,MAAM,AAAoB,wDAAC,AAAe,mEAAC,AAAc,AAAC,AAAC;AAE9E,kBAAM,AAAW,cAAG,AAAI,MAAC,AAAW;AACpC,kBAAM,AAAM,SAAG,MAAM,AAAkB,oDAAC,AAAU,YAAE,AAAU,YAAE,AAAW,aAAE,AAAiB,AAAC;AAC/F,AAAE,AAAC,gBAAC,AAAK,4DAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAK,AAAC,sGAAqB,AAAiB,6EAAC,AAAM,AAAC,OAAE,AAAC,AACzD;AAAC;AACD,kBAAM,AAAc,gDAAC,AAAM,AAAC;AAC5B,AAAI,kBAAC,AAAO,UAAG,AAAM;AAErB,AAAI,kBAAC,AAAM,SAAG,4FAAiC,AAAU,2EAAM,AAAM,OAAC,AAAW;AAAE,AAAE,uBAAI,AAAG,GAAC,AAAG,AAAC,AAAC;aAAvC,AAAG,CAA1C,AAA0B;AAE9C,AAAI,kBAAC,AAAiC,oCAAG,AAAI,MAAC,AAAM,WAAK,AAAU;AAEnE,kBAAM,AAAc,iBAAG,AAAI,MAAC,AAAiC,oCAAG,AAAI,MAAC,AAAI,KAAC,AAAI,MAAC,AAAM,QAAE,AAAc,AAAC,kBAAG,AAAc;AAEvH,kBAAM,AAAa,gBAAG,AAAM,OAAC,AAAa;AAC1C,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,QAAI,CAAC,AAAI,MAAC,AAAiC,AAAC,mCAAC,AAAC;AACnE,AAAI,sBAAC,AAAQ,WAAG,AAAW,AAC7B;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAI,sBAAC,AAAQ,WAAG,MAAM,AAAI,MAAC,AAAmD,oDAAC,AAAc,AAAC,AAChG;AAAC;AACD,AAAU,gEAAC,AAAI,MAAC,AAAQ,UAAE,AAAa,AAAC;AAExC,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAiC,AAAC,mCAAC,AAAC;AAC3C,AAAK,AAAC,6HAA4C,AAAc,wBAAU,AAAc,cAAG,AAAC,AAC9F;AAAC;AAED,AAAa,6EAAC,AAAI,MAAC,AAAQ,UAAE,AAAW,aAAE,AAAc,gBAAE,AAAc,AAAC;AAEzE,AAAI,kBAAC,AAAe,kBAAG,MAAM,AAAkB,oDAAC,AAAM,QAAE,AAAU,YAAE,AAAI,MAAC,AAAkB,qBAAG,AAAI,MAAC,AAAQ,WAAG,AAAI,AAAC;AACnH,AAAI,kBAAC,AAAW,cAAG,AAAM,OAAC,AAAW;AACrC,AAAI,kBAAC,AAAO,UAAG,AAAI,AAAO,0CAAC,AAAI,MAAC,AAAQ,AAAE,AAAI,AAAC;AAE/C,kBAAM,AAAY,eAA8B,AAAE;AAClD,kBAAM,AAAM,eAAQ,AAAO,QAAC,AAAI,MAAC,AAAU,2EAAM,AAAM,OAAC,AAAW;AAAE,AAAE,uBAAI,AAAG,GAAC,AAAM,AAAC;aAAzC,AAAG,KAA0C,AAAM,AAAC,MAAlF,AAAI;AACnB,AAAM;AACJ,AAAM,wBAAE,AAAM;AACd,AAAiB,mCAAE,wDAAqB,AAAI,MAAC,AAAO,QAAC,AAAM,QAAE,AAAY,AAAC;AAAE,2BAAM,AAAG,oDAAc,AAAG;AAAC,AAAE,+BAAI,AAAE,AAAE,AAAC;qBAA5B,AAAY,EAAiB,AAAM,OAAC,AAAI,MAAC,AAAc,eAAC,AAAO,AAAE,AAAC,AAAC,AAAC,AAC3J,AACH;iBAF6B,AAAc;AAFlC;;AAIR;AAEa,AAAmD,uDAAzD,AAAK,CAAqD,AAAsB;;;;AACtF,gBAAI,AAAI,OAAG,MAAM,AAAoB,wDAAC,AAAe,mEAAC,AAAc,AAAC,AAAC;AACtE,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,uBAAC,AAAI,AACb;AAAC;AAED,AAAI,mBAAG,MAAM,AAAoB,wDAAC,AAAY,0CAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAU,YAAE,AAAU,AAAC,aAAE,AAAc,AAAC,AAAC;AACvG,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAI,uBAAC,AAAmB,sBAAG,AAAI;AAC/B,AAAM,uBAAC,AAAI,AACb;AAAC;AAED,kBAAM,IAAI,AAAK,AAAC,yCAAmC,AAAI,MAAC,AAAO,QAAC,AAAc,AAAC,eAAE,AAAC,AACpF;;AAAC;AAEa,AAAO,WAAb,AAAK,CAAS,AAAc,QAAE,AAAuC;;;;AAC3E,kBAAM,AAAS,YAAwB,AAAE;AACzC,kBAAM,AAAgB,mBAAG,IAAI,AAAG,AAAiC;AACjE,kBAAM,AAAc,iBAAG,IAAI,AAAG,AAAU;AAExC,AAAqC;AACrC,gBAAI,AAAS,YAAG,AAAI,OAAC,AAAW,eAAI,AAAI,QAAI,AAAI,OAAC,AAAO,QAAC,AAAuB,2BAAI,AAAI;AACxF,AAAG,AAAC,AAAC,AAAM,+BAA0B,AAAI,OAAC,AAAO,QAAC,AAAQ,AAAC;AAAC,AAAC;;sBAAjD,AAAQ;sBAAE,AAAU,AAAC;;AAC/B,AAAE,AAAC,oBAAC,AAAI,OAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AACrC,AAAK,AACP;AAAC;AAED,AAAE,AAAC,oBAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,OAAI,AAAO,QAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAO,QAAC,AAAQ,AAAC,UAAC,AAAC;AAChF,0BAAM,IAAI,AAAK,MAAC,AAAwI,AAAC,AAC3J;AAAC;AAED,oBAAI,AAAS,YAA2B,AAAI;AAC5C,AAAE,AAAC,oBAAC,AAAS,aAAI,AAAO,QAAC,AAAQ,aAAK,AAAO,WAAI,AAAQ,aAAK,AAAQ,iCAAC,AAAO,AAAC,SAAC,AAAC;AAC/E,AAAS,gCAAG,AAAI,gEAAC,AAAM,QAAE,CAAC,AAAW,AAAC,AAAC,AACzC;AAAC;AAED,sBAAM,AAAQ,WAAG,AAAI,OAAC,AAAY,aAAC,AAAQ,UAAE,AAAY,AAAC;AAC1D,sBAAM,AAAY,eAAwB,IAAI,AAAG,AAAE;AACnD,AAAgB,iCAAC,AAAG,IAAC,AAAQ,UAAE,AAAY,AAAC;AAE5C,AAAG,AAAC,AAAC,AAAM,oCAAuB,AAA2B,2EAAC,AAAU,YAAE,AAAQ,SAAC,AAA4B,8BAAE,AAAQ,AAAC,AAAC;AAAC,AAAC;;0BAAjH,AAAI;0BAAE,AAAW,AAAC;;AAC5B,AAAE,AAAC,wBAAC,AAAI,OAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AACrC,AAAK,AACP;AAAC;AAED,0BAAM,AAAI,OAAC,AAAsB,uBAAC,AAAQ,UAAE,AAAI,AAAC;AAEjD,AAAE,AAAC,wBAAC,AAAI,OAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AACrC,AAAK,AACP;AAAC;AAED,AAAE,AAAC,wBAAC,AAAS,aAAI,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACnC,AAAS,oCAAG,AAAK;AACjB,8BAAM,AAAgB,iBAAC,AAAS,AAAC,AACnC;AAAC;AAED,0BAAM,AAAU,aAAG,AAAa,6DAAC,AAAY,cAAE,AAAW,YAAC,AAAM,WAAK,AAAC,IAAG,AAAQ,SAAC,AAAa,gBAAG,AAAW,aAAE,AAAM,QAAE,AAAQ,UAAE,AAAY,AAAC;AAC/I,0BAAM,AAAO,UAAG,IAAI,AAAG,AAAU;AACjC,AAAG,AAAC,yBAAC,MAAM,AAAM,UAAI,AAAU,AAAC,YAAC,AAAC;AAChC,AAAE,AAAC,4BAAC,AAAM,AAAY,AAAU,AAAC,wEAAC,AAAC;AACjC,AAAQ,AACV;AAAC;AAED,8BAAM,AAAM,SAAY,AAAO,OAAC,AAAM;AACtC,AAAE,AAAC,4BAAC,AAAc,eAAC,AAAG,IAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC/B,AAAO,oCAAC,AAAG,IAAC,AAAM,AAAC,AACrB;AAAC,AACH;AAAC;AAED,AAAE,AAAC,wBAAC,AAAO,QAAC,AAAI,OAAG,AAAC,AAAC,GAAC,AAAC;AACrB,8EAAsB,AAAG,IAAC,AAAK,MAAC,AAAI,KAAC,AAAO,AAAC,SAAC,AAAI,AAAE,QAAE,AAAE;AACtD,AAAc,2CAAC,AAAG,IAAC,AAAE,AAAC;AACtB,AAAM,mCAAC,AAAS,+CAAC,AAAE,AAAC,AACtB;AAAC,AAAC,AACJ,yBAJQ,AAAe;AAItB;AAED,0BAAM,AAAQ,SAAC,AAAI,KAAC,AAAM,QAAE,AAAI,MAAE,AAAU,YAAE,AAAS,AAAC,AAC1D;AAAC;AAED,AAAE,AAAC,oBAAC,AAAI,OAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AACrC,AAAK,AACP;AAAC;AAED,AAAG,AAAC,qBAAC,MAAM,AAAM,UAAI,AAAY,aAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAC3C,AAAS,8BAAC,AAAI,KAAC,AAAM,OAAC,AAAW,AAAE,AAAC,AACtC;AAAC,AACH;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AACrC,AAAG,AAAC,qBAAC,MAAM,AAAI,QAAI,AAAS,AAAC,WAAC,AAAC;AAC7B,AAAE,AAAC,wBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACE,AAAK,6BAAC,AAAM,AAAE,AACvC;AAAC,AACH;AAAC,AACH;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAe,gDAAC,AAAG,IAAC,AAAS,AAAC,AACtC;AAAC;AACD,AAAM,mBAAC,AAAgB,AACzB;;AAAC;AAEO,AAAY,iBAAC,AAAkB,UAAE,AAAuC;AAC9E,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAuB,2BAAI,AAAI,AAAC,MAAC,AAAC;AACjD,AAAM,mBAAC,AAAI,KAAC,AAAO,QAAC,AAAwB,wBAAC,AAAI,MAAG,AAAQ,UAAE,AAAY,AAAC,AAC7E;AAAC;AAED,AAAM,AAAC,gBAAC,AAAQ,AAAC,AAAC,AAAC;AACjB,iBAAK,AAAQ,iCAAC,AAAG;AACjB,AAAC;AACC,0BAAM,AAAW,cAAuB,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAO;AACxE,AAAM,2BAAC,IAAI,AAAW,YAAC,AAAI,AAAC,AAC9B;AAAC;AAED,iBAAK,AAAQ,iCAAC,AAAO;AACrB,AAAC;AACC,0BAAM,AAAW,cAAuB,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAW;AAC5E,AAAM,2BAAC,IAAI,AAAW,YAAC,AAAI,AAAC,AAC9B;AAAC;AAED,iBAAK,AAAQ,iCAAC,AAAK;AACjB,AAAM,uBAAC,AAAI,KAAC,AAAO,QAAC,AAAiB,AAAC,mBAAC,AAAa,AAAC,eAAC,AAAI,AAAC;AAE7D;AACE,sBAAM,IAAI,AAAK,AAAC,2BAAqB,AAAQ,QAAE,AAAC,AACpD,AAAC,AACH;;AAAC;AAEa,AAAsB,0BAA5B,AAAK,CAAwB,AAAkB,UAAE,AAAU;;;;AACjE,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AAC7B,AAAM,AACR;AAAC;AAED,kBAAM,AAAa,gBAAG,EAAC,AAAO,SAAE,AAAI,OAAC,AAAW,eAAI,AAAI,OAAC,AAAe,iBAAE,AAAa,eAAE,AAAI,OAAC,AAAW,eAAI,AAAI,AAAC;AAClH,kBAAM,AAAO,UAAG,AAAI,OAAC,AAAM;AAC3B,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAc,mBAAK,AAAI,AAAC,MAAC,AAAC;AACpC,AAAG,AAAC,sFAAuC,AAAI,6BAAC,AAAI,AAAC,KAAE,AAAC;AACxD,sFAAW,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAc,iBAAG,AAAU,YAAE,CAAC,AAAS,AAAC;AAChF,AAAG,yBAAE,AAAS,uCAAC,AAAa,eAAE,AAAQ,SAAC,AAAQ,UAAE,AAAI,6BAAC,AAAI,AAAC,OAAE,AAAI,AAAC,AACnE,AAAC,AACJ;AAHsF,iBAA9E,AAAI;AAGX;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAU,eAAK,AAAK,AAAC,OAAC,AAAC;AACjC,AAAG,+CAAC,AAAkE,AAAC;AACvE,AAAM,AACR;AAAC;AAED,kBAAM,AAAW,cAAG,AAAO,QAAC,AAAW;AACvC,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,sBAAM,AAAmC,sCAAG;AAC1C,AAAM,4BAAE,AAAI,OAAC,AAAM;AACnB,AAAe,qCAAE,AAAI,OAAC,AAAe;AACrC,AAAQ;AACR,AAAI,0BAAE,AAAI,6BAAC,AAAI,AAAC,AACjB,AAAC;AAL4D,iBAAZ,AAAW;AAM7D,AAAE,AAAC,oBAAC,CAAC,AAAmC,AAAC,qCAAC,AAAM,AAClD;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAsB,2BAAK,AAAI,QAAI,AAAQ,SAAC,AAAQ,aAAK,AAAO,QAAC,AAAQ,AAAC,UAAC,AAAC;AACtF,AAAG,+CAAC,AAA6D,AAAC,AACpE;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAgB,8CAAC,AAAO,SAAE,AAAI,OAAC,AAAM,QAAE,AAAa,eAAE,AAAQ,SAAC,AAAQ,UAAE,AAAI,6BAAC,AAAI,AAAC,AAAC,AAC5F;AAAC,AACH;;AAAC;AAED,AAAS,cAAC,AAAyB;AACjC,cAAM,AAAS,YAAG,AAAI,KAAC,AAAM,OAAC,AAAS;AACvC,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAiB,kBAAC,AAAK,AAAE;AAC/C,AAAE,AAAC,YAAC,AAAS,aAAI,AAAI,AAAC,MAAC,AAAC;AACtB,AAA8B;AAC9B,AAAQ,qBAAC,AAAI,KAAC,AAAS,AAAC,AAC1B;AAAC;AACD,AAAM,eAAC,AAAe,gDAAC,AAAI,KAAC,AAAQ,UAAE,AAAE,MAAI,AAAE,GAAC,AAAO,AAAC,AAAC,AAC1D;AAAC,AACF,AAED,AAAM;;;4BAA6B,AAA8D;AAC/F,UAAM,AAAS,YAAG,AAAY,gBAAI,AAAI,QAAI,AAAK,MAAC,AAAO,QAAC,AAAY,AAAC,gBAAkC,AAAa,eAAG,CAAC,AAAY,AAAC;AACrI,AAAE,AAAC,QAAM,AAAS,aAAI,AAAI,QAAI,AAAS,UAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AACrD,AAAM,eAAC,CAAC,AAAQ,iCAAC,AAAU,WAAC,AAAO,QAAC,AAAQ,AAAC,AAAC,AAChD;AAAC,AACD,AAAI,eAAK,AAAS,UAAC,AAAC,AAAC,OAAK,AAAK,AAAC,OAAC,AAAC;AAChC,AAAE,AAAC,YAAC,AAAO,QAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,IAAC,AAAQ,AAAC,UAAC,AAAC;AAC/C,AAAM,mBAAC,CAAC,AAAQ,iCAAC,AAAG,KAAE,AAAQ,iCAAC,AAAK,OAAE,AAAQ,iCAAC,AAAO,AAAC,AACzD;AAAC,AACD,AAAI,mBAAK,AAAO,QAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAK,MAAC,AAAQ,AAAC,UAAC,AAAC;AACtD,AAAsC;AACtC,AAAM,mBAAC,CAAC,AAAQ,iCAAC,AAAK,OAAE,AAAQ,iCAAC,AAAO,AAAC,AAC3C;AAAC,AACD,AAAI,SAJC,AAAE,AAAC,MAIH,AAAC;AACJ,AAAM,mBAAC,CAAC,AAAQ,iCAAC,AAAO,AAAC,AAC3B;AAAC,AACH;AAAC,AACD,AAAI,KAZC,AAAE,AAAC,MAYH,AAAC;AACJ,AAAM,eAAC,AAAS,UAAC,AAAG,IAAC,AAAE,MAAI,AAAE,AAAY,AAAQ,iDAAG,AAAE,KAAG,AAAQ,iCAAC,AAAU,WAAC,AAAG,AAAC,AAAC,AACpF;AAAC,AACH;AAAC","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CancellationToken } from \"electron-builder-http\"\nimport { computeDefaultAppDirectory, debug, exec, Lazy, safeStringifyJson, TmpDir, use } from \"electron-builder-util\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { log } from \"electron-builder-util/out/log\"\nimport { all, executeFinally, orNullIfFileNotExist } from \"electron-builder-util/out/promise\"\nimport { EventEmitter } from \"events\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { lt as isVersionLessThan } from \"semver\"\nimport { AppInfo } from \"./appInfo\"\nimport { readAsarJson } from \"./asar\"\nimport { Arch, Platform, SourceRepositoryInfo, Target } from \"./core\"\nimport MacPackager from \"./macPackager\"\nimport { AfterPackContext, Config, Metadata } from \"./metadata\"\nimport { ArtifactCreated, BuildInfo, PackagerOptions } from \"./packagerApi\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { computeArchToTargetNamesMap, createTargets, NoOpTarget } from \"./targets/targetFactory\"\nimport { computeFinalConfig, getElectronVersion, validateConfig } from \"./util/config\"\nimport { checkMetadata, readPackageJson } from \"./util/packageMetadata\"\nimport { getRepositoryInfo } from \"./util/repositoryInfo\"\nimport { getGypEnv, installOrRebuild } from \"./util/yarn\"\nimport { WinPackager } from \"./winPackager\"\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  emitter.on(event, handler)\n}\n\ndeclare const PACKAGE_VERSION: string\n\nexport class Packager implements BuildInfo {\n  readonly projectDir: string\n  appDir: string\n\n  metadata: Metadata\n\n  private _isPrepackedAppAsar: boolean\n\n  get isPrepackedAppAsar(): boolean {\n    return this._isPrepackedAppAsar\n  }\n\n  private devMetadata: Metadata\n\n  private _config: Config\n\n  get config(): Config {\n    return this._config\n  }\n\n  isTwoPackageJsonProjectLayoutUsed = true\n\n  electronVersion: string\n  muonVersion?: string | null\n\n  readonly eventEmitter = new EventEmitter()\n\n  appInfo: AppInfo\n\n  readonly tempDirManager = new TmpDir()\n\n  private _repositoryInfo = new Lazy<SourceRepositoryInfo | null>(() => getRepositoryInfo(this.projectDir, this.metadata, this.devMetadata))\n\n  private readonly afterPackHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\n\n  get repositoryInfo(): Promise<SourceRepositoryInfo | null> {\n    return this._repositoryInfo.value\n  }\n\n  readonly prepackaged?: string | null\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(readonly options: PackagerOptions, readonly cancellationToken: CancellationToken) {\n    if (\"devMetadata\" in options) {\n      throw new Error(\"devMetadata in the options is deprecated, please use config instead\")\n    }\n    if (\"extraMetadata\" in options) {\n      throw new Error(\"extraMetadata in the options is deprecated, please use config.extraMetadata instead\")\n    }\n\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n\n    this.prepackaged = options.prepackaged == null ? null : path.resolve(this.projectDir, options.prepackaged)\n\n    try {\n      log(\"electron-builder \" + PACKAGE_VERSION)\n    }\n    catch (e) {\n      // error in dev mode without babel\n      if (!(e instanceof ReferenceError)) {\n        throw e\n      }\n    }\n  }\n\n  addAfterPackHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\n    this.afterPackHandlers.push(handler)\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  dispatchArtifactCreated(event: ArtifactCreated) {\n    this.eventEmitter.emit(\"artifactCreated\", event)\n  }\n\n  async build(): Promise<BuildResult> {\n    let configPath: string | null = null\n    let configFromOptions = this.options.config\n    if (typeof configFromOptions === \"string\") {\n      // it is a path to config file\n      configPath = configFromOptions\n      configFromOptions = null\n    }\n    else if (configFromOptions != null && configFromOptions.extends != null && configFromOptions.extends.includes(\".\")) {\n      configPath = configFromOptions.extends\n    }\n\n    const projectDir = this.projectDir\n\n    const devPackageFile = path.join(projectDir, \"package.json\")\n    this.devMetadata = await orNullIfFileNotExist(readPackageJson(devPackageFile))\n\n    const devMetadata = this.devMetadata\n    const config = await computeFinalConfig(projectDir, configPath, devMetadata, configFromOptions)\n    if (debug.enabled) {\n      debug(`Effective config: ${safeStringifyJson(config)}`)\n    }\n    await validateConfig(config)\n    this._config = config\n\n    this.appDir = await computeDefaultAppDirectory(projectDir, use(config.directories, it => it!.app))\n\n    this.isTwoPackageJsonProjectLayoutUsed = this.appDir !== projectDir\n\n    const appPackageFile = this.isTwoPackageJsonProjectLayoutUsed ? path.join(this.appDir, \"package.json\") : devPackageFile\n\n    const extraMetadata = config.extraMetadata\n    if (devMetadata != null && !this.isTwoPackageJsonProjectLayoutUsed) {\n      this.metadata = devMetadata\n    }\n    else {\n      this.metadata = await this.readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile)\n    }\n    deepAssign(this.metadata, extraMetadata)\n\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      debug(`Two package.json structure is used (dev: ${devPackageFile}, app: ${appPackageFile})`)\n    }\n\n    checkMetadata(this.metadata, devMetadata, appPackageFile, devPackageFile)\n\n    this.electronVersion = await getElectronVersion(config, projectDir, this.isPrepackedAppAsar ? this.metadata : null)\n    this.muonVersion = config.muonVersion\n    this.appInfo = new AppInfo(this.metadata, this)\n\n    const cleanupTasks: Array<() => Promise<any>> = []\n    const outDir = path.resolve(this.projectDir, use(config.directories, it => it!.output) || \"dist\")\n    return {\n      outDir: outDir,\n      platformToTargets: await executeFinally(this.doBuild(outDir, cleanupTasks), () => all(cleanupTasks.map(it => it()).concat(this.tempDirManager.cleanup())))\n    }\n  }\n\n  private async readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile: string): Promise<Metadata> {\n    let data = await orNullIfFileNotExist(readPackageJson(appPackageFile))\n    if (data != null) {\n      return data\n    }\n\n    data = await orNullIfFileNotExist(readAsarJson(path.join(this.projectDir, \"app.asar\"), \"package.json\"))\n    if (data != null) {\n      this._isPrepackedAppAsar = true\n      return data\n    }\n\n    throw new Error(`Cannot find package.json in the ${path.dirname(appPackageFile)}`)\n  }\n\n  private async doBuild(outDir: string, cleanupTasks: Array<() => Promise<any>>): Promise<Map<Platform, Map<String, Target>>> {\n    const distTasks: Array<Promise<any>> = []\n    const platformToTarget = new Map<Platform, Map<String, Target>>()\n    const createdOutDirs = new Set<string>()\n\n    // custom packager - don't check wine\n    let checkWine = this.prepackaged == null && this.options.platformPackagerFactory == null\n    for (const [platform, archToType] of this.options.targets!) {\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      if (platform === Platform.MAC && process.platform === Platform.WINDOWS.nodeName) {\n        throw new Error(\"Build for macOS is supported only on macOS, please see https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build\")\n      }\n\n      let wineCheck: Promise<string> | null = null\n      if (checkWine && process.platform !== \"win32\" && platform === Platform.WINDOWS) {\n        wineCheck = exec(\"wine\", [\"--version\"])\n      }\n\n      const packager = this.createHelper(platform, cleanupTasks)\n      const nameToTarget: Map<String, Target> = new Map()\n      platformToTarget.set(platform, nameToTarget)\n\n      for (const [arch, targetNames] of computeArchToTargetNamesMap(archToType, packager.platformSpecificBuildOptions, platform)) {\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        await this.installAppDependencies(platform, arch)\n\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        if (checkWine && wineCheck != null) {\n          checkWine = false\n          await checkWineVersion(wineCheck)\n        }\n\n        const targetList = createTargets(nameToTarget, targetNames.length === 0 ? packager.defaultTarget : targetNames, outDir, packager, cleanupTasks)\n        const ourDirs = new Set<string>()\n        for (const target of targetList) {\n          if (target instanceof NoOpTarget) {\n            continue\n          }\n\n          const outDir = (<Target>target).outDir\n          if (createdOutDirs.has(outDir)) {\n            ourDirs.add(outDir)\n          }\n        }\n\n        if (ourDirs.size > 0) {\n          await BluebirdPromise.map(Array.from(ourDirs).sort(), it => {\n            createdOutDirs.add(it)\n            return ensureDir(it)\n          })\n        }\n\n        await packager.pack(outDir, arch, targetList, distTasks)\n      }\n\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      for (const target of nameToTarget.values()) {\n        distTasks.push(target.finishBuild())\n      }\n    }\n\n    if (this.cancellationToken.cancelled) {\n      for (const task of distTasks) {\n        if (\"cancel\" in task) {\n          (<BluebirdPromise<any>>task).cancel()\n        }\n      }\n    }\n    else {\n      await BluebirdPromise.all(distTasks)\n    }\n    return platformToTarget\n  }\n\n  private createHelper(platform: Platform, cleanupTasks: Array<() => Promise<any>>): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory!(this,  platform, cleanupTasks)\n    }\n\n    switch (platform) {\n      case Platform.MAC:\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(`Unknown platform: ${platform}`)\n    }\n  }\n\n  private async installAppDependencies(platform: Platform, arch: Arch): Promise<any> {\n    if (this.prepackaged != null) {\n      return\n    }\n\n    const frameworkInfo = {version: this.muonVersion || this.electronVersion, useCustomDist: this.muonVersion == null}\n    const options = this.config\n    if (options.nodeGypRebuild === true) {\n      log(`Executing node-gyp rebuild for arch ${Arch[arch]}`)\n      await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n        env: getGypEnv(frameworkInfo, platform.nodeName, Arch[arch], true),\n      })\n    }\n\n    if (options.npmRebuild === false) {\n      log(\"Skip app dependencies rebuild because npmRebuild is set to false\")\n      return\n    }\n\n    const beforeBuild = options.beforeBuild\n    if (beforeBuild != null) {\n      const performDependenciesInstallOrRebuild = await beforeBuild({\n        appDir: this.appDir,\n        electronVersion: this.electronVersion,\n        platform,\n        arch: Arch[arch]\n      })\n      if (!performDependenciesInstallOrRebuild) return\n    }\n\n    if (options.npmSkipBuildFromSource !== true && platform.nodeName !== process.platform) {\n      log(\"Skip app dependencies rebuild because platform is different\")\n    }\n    else {\n      await installOrRebuild(options, this.appDir, frameworkInfo, platform.nodeName, Arch[arch])\n    }\n  }\n\n  afterPack(context: AfterPackContext): Promise<void> {\n    const afterPack = this.config.afterPack\n    const handlers = this.afterPackHandlers.slice()\n    if (afterPack != null) {\n      // user handler should be last\n      handlers.push(afterPack)\n    }\n    return BluebirdPromise.each(handlers, it => it(context))\n  }\n}\n\nexport function normalizePlatforms(rawPlatforms: Array<string | Platform> | string | Platform | n): Array<Platform> {\n  const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? (<Array<string | Platform | n>>rawPlatforms) : [rawPlatforms]\n  if (<any>platforms == null || platforms.length === 0) {\n    return [Platform.fromString(process.platform)]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === Platform.MAC.nodeName) {\n      return [Platform.MAC, Platform.LINUX, Platform.WINDOWS]\n    }\n    else if (process.platform === Platform.LINUX.nodeName) {\n      // macOS code sign works only on macOS\n      return [Platform.LINUX, Platform.WINDOWS]\n    }\n    else {\n      return [Platform.WINDOWS]\n    }\n  }\n  else {\n    return platforms.map(it => it instanceof Platform ? it : Platform.fromString(it!))\n  }\n}\n\n/**\n * @private\n */\nexport async function checkWineVersion(checkPromise: Promise<string>) {\n  function wineError(prefix: string): string {\n    return `${prefix}, please see https://github.com/electron-userland/electron-builder/wiki/Multi-Platform-Build#${(process.platform === \"linux\" ? \"linux\" : \"macos\")}`\n  }\n\n  let wineVersion: string\n  try {\n    wineVersion = (await checkPromise).trim()\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      throw new Error(wineError(\"wine is required\"))\n    }\n    else {\n      throw new Error(`Cannot check wine version: ${e}`)\n    }\n  }\n\n  if (wineVersion.startsWith(\"wine-\")) {\n    wineVersion = wineVersion.substring(\"wine-\".length)\n  }\n\n  const spaceIndex = wineVersion.indexOf(\" \")\n  if (spaceIndex > 0) {\n    wineVersion = wineVersion.substring(0, spaceIndex)\n  }\n\n  const suffixIndex = wineVersion.indexOf(\"-\")\n  if (suffixIndex > 0) {\n    wineVersion = wineVersion.substring(0, suffixIndex)\n  }\n\n  if (wineVersion.split(\".\").length === 2) {\n    wineVersion += \".0\"\n  }\n\n  if (isVersionLessThan(wineVersion, \"1.8.0\")) {\n    throw new Error(wineError(`wine 1.8+ is required, but your version is ${wineVersion}`))\n  }\n}\n\nexport interface BuildResult {\n  readonly outDir: string\n  readonly platformToTargets: Map<Platform, Map<String, Target>>\n}"]}
