{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/util/config.ts"],"names":[],"mappings":"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","sourcesContent":["import Ajv from \"ajv\"\nimport { CancellationToken } from \"electron-builder-http\"\nimport { debug } from \"electron-builder-util\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { statOrNull } from \"electron-builder-util/out/fs\"\nimport { log, warn } from \"electron-builder-util/out/log\"\nimport { httpExecutor } from \"electron-builder-util/out/nodeHttpExecutor\"\nimport { orNullIfFileNotExist } from \"electron-builder-util/out/promise\"\nimport { readFile, readJson } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport JSON5 from \"json5\"\nimport * as path from \"path\"\nimport { Config } from \"../metadata\"\nimport { reactCra } from \"../presets/rectCra\"\nimport AdditionalPropertiesParams = ajv.AdditionalPropertiesParams\nimport ErrorObject = ajv.ErrorObject\nimport TypeParams = ajv.TypeParams\n\nfunction getConfigFromPackageData(metadata: any) {\n  return metadata.build\n}\n\n/** @internal */\nexport async function doLoadConfig(configFile: string, projectDir: string): Promise<Config> {\n  const data = await readFile(configFile, \"utf8\")\n  let result\n  if (configFile.endsWith(\".json5\") || configFile.endsWith(\".json\")) {\n    result = JSON5.parse(data)\n  }\n  else if (configFile.endsWith(\".toml\")) {\n    result = require(\"toml\").parse(data)\n  }\n  else {\n    result = safeLoad(data)\n  }\n\n  const relativePath = path.relative(projectDir, configFile)\n  log(`Using ${relativePath.startsWith(\"..\") ? configFile : relativePath} configuration file`)\n  return result\n}\n\n/** @internal */\nexport async function loadConfig(projectDir: string, packageMetadata?: any): Promise<Config | null> {\n  for (const configFile of [\"electron-builder.yml\", \"electron-builder.yaml\", \"electron-builder.json\", \"electron-builder.json5\", \"electron-builder.toml\"]) {\n    const data = await orNullIfFileNotExist(doLoadConfig(path.join(projectDir, configFile), projectDir))\n    if (data != null) {\n      return data\n    }\n  }\n\n  const data = getConfigFromPackageData(packageMetadata || (await orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\")))))\n  if (data != null) {\n    return data\n  }\n\n  if ((await statOrNull(path.join(projectDir, \"app.asar\"))) != null) {\n    // prepacked, do not throw error, just ignore\n    return null\n  }\n\n  throw new Error(`Cannot find package.json in the ${projectDir}`)\n}\n\n/** @internal */\nexport async function computeFinalConfig(projectDir: string, configPath: string | null, packageMetadata: any | null, configFromOptions: Config | null | undefined): Promise<Config> {\n  let fileOrPackageConfig\n  if (configPath == null) {\n    fileOrPackageConfig = packageMetadata == null ? null : await loadConfig(projectDir, packageMetadata)\n  }\n  else {\n    fileOrPackageConfig = await doLoadConfig(path.resolve(projectDir, configPath), projectDir)\n  }\n\n  let config = deepAssign(fileOrPackageConfig == null ? Object.create(null) : fileOrPackageConfig, configFromOptions)\n\n  if (config.extends == null && config.extends !== null && packageMetadata != null) {\n    const devDependencies = packageMetadata.devDependencies\n    if (devDependencies != null && \"react-scripts\" in devDependencies) {\n      (<any>config).extends = \"react-cra\"\n    }\n  }\n\n  if (config.extends === \"react-cra\") {\n    return deepAssign(await reactCra(projectDir), config)\n  }\n  else {\n    return config\n  }\n}\n\n/** @internal */\nexport async function getElectronVersion(config: Config | null | undefined, projectDir: string, projectMetadata?: any | null): Promise<string> {\n  // build is required, but this check is performed later, so, we should check for null\n  if (config != null && config.electronVersion != null) {\n    return config.electronVersion\n  }\n\n  // projectMetadata passed only for prepacked app asar and in this case no dev deps in the app.asar\n  if (projectMetadata == null) {\n    for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n      try {\n        return (await readJson(path.join(projectDir, \"node_modules\", name, \"package.json\"))).version\n      }\n      catch (e) {\n        if (e.code !== \"ENOENT\") {\n          warn(`Cannot read electron version from ${name} package.json: ${e.message}`)\n        }\n      }\n    }\n  }\n\n  const packageJsonPath = path.join(projectDir, \"package.json\")\n  const electronPrebuiltDep = findFromElectronPrebuilt(projectMetadata || await readJson(packageJsonPath))\n  if (electronPrebuiltDep == null) {\n    try {\n      const releaseInfo = await httpExecutor.request<any>({\n        hostname: \"github.com\",\n        path: \"/electron/electron/releases/latest\",\n        headers: {\n          Accept: \"application/json\",\n        },\n      }, new CancellationToken())\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      warn(e)\n    }\n\n    throw new Error(`Cannot find electron dependency to get electron version in the '${packageJsonPath}'`)\n  }\n\n  const firstChar = electronPrebuiltDep[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? electronPrebuiltDep.substring(1) : electronPrebuiltDep\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (const name of [\"electron\", \"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let dep = devDependencies == null ? null : devDependencies[name]\n    if (dep == null) {\n      const dependencies = packageData.dependencies\n      dep = dependencies == null ? null : dependencies[name]\n    }\n    if (dep != null) {\n      return dep\n    }\n  }\n  return null\n}\n\nlet validatorPromise: Promise<any> | null = null\n\nasync function createConfigValidator() {\n  const ajv = new Ajv({allErrors: true})\n  ajv.addMetaSchema(require(\"ajv/lib/refs/json-schema-draft-04.json\"))\n  require(\"ajv-keywords\")(ajv, [\"typeof\"])\n  const schema = await readJson(path.join(__dirname, \"..\", \"..\", \"scheme.json\"))\n  return ajv.compile(schema)\n}\n\n/** @internal */\nexport async function validateConfig(config: Config) {\n  const extraMetadata = config.extraMetadata\n  if (extraMetadata != null) {\n    if (extraMetadata.build != null) {\n      throw new Error(`--em.build is deprecated, please specify as -c\"`)\n    }\n    if (extraMetadata.directories != null) {\n      throw new Error(`--em.directories is deprecated, please specify as -c.directories\"`)\n    }\n  }\n\n  if (validatorPromise == null) {\n    validatorPromise = createConfigValidator()\n  }\n\n  const validator = await validatorPromise\n  if (!validator(config)) {\n    debug(JSON.stringify(validator.errors, null, 2))\n    throw new Error(`Config is invalid:\n${JSON.stringify(normaliseErrorMessages(validator.errors!), null, 2)}\n\nHow to fix:\n  1. Open https://github.com/electron-userland/electron-builder/wiki/Options\n  2. Search the option name on the page.\n    * Not found? The option was deprecated or not exists (check spelling).\n    * Found? Check that the option in the appropriate place. e.g. \"title\" only in the \"dmg\", not in the root.\n`)\n  }\n}\n\nfunction normaliseErrorMessages(errors: Array<ErrorObject>) {\n  const result: any = Object.create(null)\n  for (const e of errors) {\n    if (e.keyword === \"type\" && (<TypeParams>e.params).type === \"null\") {\n      // ignore - no sense to report that type accepts null\n      continue\n    }\n\n    const dataPath = e.dataPath.length === 0 ? [] : e.dataPath.substring(1).split(\".\")\n    if (e.keyword === \"additionalProperties\") {\n      dataPath.push((<AdditionalPropertiesParams>e.params).additionalProperty)\n    }\n\n    let o = result\n    let lastName: string | null = null\n    for (const p of dataPath) {\n      if (p === dataPath[dataPath.length - 1]) {\n        lastName = p\n        break\n      }\n      else {\n        if (o[p] == null) {\n          o[p] = Object.create(null)\n        }\n        else if (typeof o[p] === \"string\") {\n          o[p] = [o[p]]\n        }\n        o = o[p]\n      }\n    }\n\n    if (lastName == null) {\n      lastName = \"unknown\"\n    }\n\n    let message = e.message!.toUpperCase()[0] + e.message!.substring(1)\n    switch (e.keyword) {\n      case \"additionalProperties\":\n        message = \"Unknown option\"\n        break\n\n      case \"required\":\n        message = \"Required option\"\n        break\n\n      case \"anyOf\":\n        message = \"Invalid option object\"\n        break\n    }\n\n    if (o[lastName] != null && !Array.isArray(o[lastName])) {\n      o[lastName] = [o[lastName]]\n    }\n\n    if (Array.isArray(o[lastName])) {\n      o[lastName].push(message)\n    }\n    else {\n      o[lastName] = message\n    }\n  }\n  return result\n}"]}
