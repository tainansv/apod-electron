{"version":3,"file":"repositoryInfo.js","sourceRoot":"","sources":["../../src/util/repositoryInfo.ts"],"names":[],"mappings":";;;;;;;;;;;;;oEAWA,AAAK,WAAiC,AAAkB;AACtD,cAAM,AAAI,OAAG,MAAM,AAAoB,wDAAC,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAM,QAAE,AAAQ,AAAC,WAAE,AAAM,AAAC,AAAC;AAClG,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,cAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAO,AAAC;AAChC,cAAM,AAAC,IAAG,AAAI,KAAC,AAAO,QAAC,AAAmB,AAAC;AAC3C,AAAE,AAAC,YAAC,AAAC,MAAK,CAAC,AAAC,AAAC,GAAC,AAAC;AACb,gBAAI,AAAC,IAAG,AAAI,KAAC,AAAC,IAAG,AAAC,AAAC;AACnB,AAAE,AAAC,gBAAC,CAAC,AAAC,EAAC,AAAK,MAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AAC1B,AAAC,oBAAG,AAAI,KAAC,AAAC,IAAG,AAAC,AAAC,AACjB;AAAC;AAED,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAK,MAAC,AAAW,AAAC,AAAC,cAAC,AAAC;AACzB,AAAM,uBAAC,AAAC,EAAC,AAAO,QAAC,AAAY,cAAE,AAAE,AAAC,AACpC;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAI,AACb;AAAC;;;;;;;;qEAED,AAAK,WAAmB,AAAkB,YAAE,AAAqC;AAC/E,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,mBAAC,AAAkB,uDAAC,OAAO,AAAI,SAAK,AAAQ,WAAG,AAAI,OAAG,AAAI,KAAC,AAAG,AAAC,AACvE;AAAC;AAED,YAAI,AAAG,MAAG,AAAO,QAAC,AAAG,IAAC,AAAgB;AACtC,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAChB,kBAAM,AAAI,OAAkB,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAuB;AACpG,kBAAM,AAAO,UAAkB,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAuB;AACvG,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,QAAI,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpC,AAAM;AACJ,AAAI,0BAAE,AAAI;AACV,AAAO,6BAAE,AAAO,AACjB,AACH;AAJS;AAIR;AAED,AAAG,kBAAG,MAAM,AAAsB,uBAAC,AAAU,AAAC,AAChD;AAAC;AAED,AAAM,eAAC,AAAG,OAAI,AAAI,OAAG,AAAI,OAAG,AAAkB,uDAAC,AAAG,AAAC,AACrD;AAAC;;;;;;;;;;;;;AApDD,AAAO,AAAE,AAAoB,AAAE,AAAM,AAAmC;;;;;;AACxE,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAE,AAAO,AAAI,AAAkB,AAAE,AAAM,AAAiB;;;;AAC/D,AAAO,AAAK,AAAI,AAAM,AAAM,AAI5B,AAAM;;;;2BAA4B,AAAkB,YAAE,AAAmB,UAAE,AAAsB;AAC/F,AAAM,WAAC,AAAQ,SAAC,AAAU,YAAE,CAAC,AAAW,eAAI,AAAI,OAAG,AAAI,OAAG,AAAW,YAAC,AAAU,AAAC,AAAI,gBAAC,AAAQ,YAAI,AAAI,OAAG,AAAI,OAAG,AAAQ,SAAC,AAAU,AAAC,AAAC,AACvI;AAAC","sourcesContent":["import { orNullIfFileNotExist } from \"electron-builder-util/out/promise\"\nimport { readFile } from \"fs-extra-p\"\nimport { fromUrl as parseRepositoryUrl } from \"hosted-git-info\"\nimport * as path from \"path\"\nimport { SourceRepositoryInfo } from \"../core\"\nimport { Metadata, RepositoryInfo } from \"../metadata\"\n\nexport function getRepositoryInfo(projectDir: string, metadata?: Metadata, devMetadata?: Metadata): Promise<SourceRepositoryInfo | null> {\n  return _getInfo(projectDir, (devMetadata == null ? null : devMetadata.repository) || (metadata == null ? null : metadata.repository))\n}\n\nasync function getGitUrlFromGitConfig(projectDir: string): Promise<string | null> {\n  const data = await orNullIfFileNotExist(readFile(path.join(projectDir, \".git\", \"config\"), \"utf8\"))\n  if (data == null) {\n    return null\n  }\n\n  const conf = data.split(/\\r?\\n/)\n  const i = conf.indexOf('[remote \"origin\"]')\n  if (i !== -1) {\n    let u = conf[i + 1]\n    if (!u.match(/^\\s*url =/)) {\n      u = conf[i + 2]\n    }\n\n    if (u.match(/^\\s*url =/)) {\n      return u.replace(/^\\s*url = /, \"\")\n    }\n  }\n  return null\n}\n\nasync function _getInfo(projectDir: string, repo?: RepositoryInfo | string | null): Promise<SourceRepositoryInfo | null> {\n  if (repo != null) {\n    return parseRepositoryUrl(typeof repo === \"string\" ? repo : repo.url)\n  }\n\n  let url = process.env.TRAVIS_REPO_SLUG\n  if (url == null) {\n    const user: string | null = process.env.APPVEYOR_ACCOUNT_NAME || process.env.CIRCLE_PROJECT_USERNAME\n    const project: string | null = process.env.APPVEYOR_PROJECT_NAME || process.env.CIRCLE_PROJECT_REPONAME\n    if (user != null && project != null) {\n      return {\n        user: user,\n        project: project,\n      }\n    }\n\n    url = await getGitUrlFromGitConfig(projectDir)\n  }\n\n  return url == null ? null : parseRepositoryUrl(url)\n}"]}
