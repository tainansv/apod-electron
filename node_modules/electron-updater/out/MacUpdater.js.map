{"version":3,"file":"MacUpdater.js","sourceRoot":"","sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { configureRequestOptions, DigestTransform, safeGetHeader } from \"electron-builder-http\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { ProgressCallbackTransform } from \"electron-builder-http/out/ProgressCallbackTransform\"\nimport { PublishConfiguration } from \"electron-builder-http/out/publishOptions\"\nimport { VersionInfo } from \"electron-builder-http/out/updateInfo\"\nimport { createServer, IncomingMessage, ServerResponse } from \"http\"\nimport { parse as parseUrl } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, FileInfo, UPDATE_DOWNLOADED } from \"./main\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: PublishConfiguration) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this._logger.info(`New version ${this.versionInfo!.version} has been downloaded`)\n      this.emit(UPDATE_DOWNLOADED, this.versionInfo)\n    })\n  }\n\n  protected doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo, cancellationToken: CancellationToken) {\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${fileInfo.url})`)\n    })\n\n    function getServerUrl() {\n      const address = server.address()\n      return `http://${address.address}:${address.port}`\n    }\n\n    return new BluebirdPromise<void>((resolve, reject) => {\n      server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n        const requestUrl = request.url!\n        if (requestUrl === \"/\") {\n          response.writeHead(200, {\"Content-Type\": \"application/json\"})\n          response.end(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\n        }\n        else if (requestUrl === \"/app.zip\") {\n          let errorOccurred = false\n          response.on(\"finish\", () => {\n            try {\n              setImmediate(() => server.close())\n            }\n            finally {\n              if (!errorOccurred) {\n                resolve()\n              }\n            }\n          })\n          this.proxyUpdateFile(response, fileInfo, error => {\n            errorOccurred = true\n            try {\n              response.writeHead(500)\n              response.end()\n            }\n            finally {\n              reject(new Error(`Cannot download \"${fileInfo.url}\": ${error}`))\n            }\n          })\n        }\n        else {\n          response.writeHead(404)\n          response.end()\n        }\n      })\n      server.listen(0, \"127.0.0.1\", 16, () => {\n        this.nativeUpdater.setFeedURL(`${getServerUrl()}`, Object.assign({\"Cache-Control\": \"no-cache\"}, this.computeRequestHeaders(fileInfo)))\n        this.nativeUpdater.checkForUpdates()\n      })\n    })\n  }\n\n  private proxyUpdateFile(nativeResponse: ServerResponse, fileInfo: FileInfo, errorHandler: (error: Error) => void) {\n    nativeResponse.writeHead(200, {\"Content-Type\": \"application/zip\"})\n\n    const parsedUrl = parseUrl(fileInfo.url)\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptions({\n      protocol: parsedUrl.protocol,\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      port: parsedUrl.port ? parseInt(parsedUrl.port, 10) : undefined,\n      headers: this.computeRequestHeaders(fileInfo) || undefined,\n    }), downloadResponse => {\n      if (downloadResponse.statusCode! >= 400) {\n        try {\n          nativeResponse.writeHead(404)\n          nativeResponse.end()\n        }\n        finally {\n          this.emit(\"error\", new Error(`Cannot download \"${fileInfo.url}\", status ${downloadResponse.statusCode}: ${downloadResponse.statusMessage}`))\n        }\n        return\n      }\n\n      const streams: Array<any> = []\n      if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n        const contentLength = safeGetHeader(downloadResponse, \"content-length\")\n        if (contentLength != null) {\n          streams.push(new ProgressCallbackTransform(parseInt(contentLength, 10), new CancellationToken(), it => this.emit(DOWNLOAD_PROGRESS, it)))\n        }\n      }\n\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\n      const sha512 = fileInfo.sha512\n      if (sha512 != null) {\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\n      }\n\n      streams.push(nativeResponse)\n\n      let lastStream = downloadResponse\n      for (const stream of streams) {\n        stream.on(\"error\", errorHandler)\n        lastStream = lastStream.pipe(stream)\n      }\n    })\n\n    downloadRequest.on(\"error\", errorHandler)\n    downloadRequest.end()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"]}
